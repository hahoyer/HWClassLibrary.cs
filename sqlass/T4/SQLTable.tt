<#@ import namespace="global::HWClassLibrary.Helper" #>
using System;
using System.Collections.Generic;
using System.Linq;
using HWClassLibrary.Debug;
using HWClassLibrary.sqlass;
using HWClassLibrary.sqlass.MetaData;

namespace <#= _context.NameSpace #>.Tables<#= NameSpaceSuffix #>
{
    sealed public partial class <#= ClassName #> 
        : ISQLSupportProvider<#
	if (HasSQLKey)
    {#>
        
        , <#= KeyProvider #><#
    }#>
    
    {<# 
	    foreach (var column in Columns)                                           
        {#> 
        public <#= column.FieldTypeName #> <#= column.Name #>;<#
        }#>


        ISQLSupport ISQLSupportProvider.SQLSupport{get{return new SQLSupport.<#= ClassName #>(this);}} <#
	if (HasSQLKey)
    {#>

        <#= KeyType #> <#= KeyProvider #>.SQLKey { get { return <#= KeyValue #>; } }<# 
    }#>
    
    }
}

namespace <#= _context.NameSpace #>.SQLSupport<#= NameSpaceSuffix #>
{
    public partial class <#= ClassName #>: ISQLSupport
    {
        readonly Tables.<#= ClassName #> _target;
        public <#= ClassName #>(Tables.<#= ClassName #> target){_target = target;}

        string ISQLSupport.Insert
        {
            get
            {
                var result = "insert into <#= SQLTableName #> values(";<# 
            foreach (var column in Columns)                                           
            {#> 
                result += _target.<#= column.Name #>.SQLFormat();<#
	            if (!IsLast(column))
	            {#>

                result += ", ";<#
	            }
	            else
                {#>

                result += ")";<#
                }
           }#>   

                return result;
            }
        }

        public static Table MetaDataSupport = new Table
        (
            TableName.Find(<#= Table.TableName.Catalog.Quote() #>, <#= Table.TableName.Schema.Quote() #>, <#= Table.TableName.Name.Quote() #>),
            () => new []
            {<# 
            foreach (var column in Columns)                                           
            {#> 

                new Column
                {
                    Name = <#= column.Name.Quote() #>,
                    Type = typeof(<#= column.Type.PrettyName() #>),
                    IsKey = <#=column.IsKey? "true":"false" #>,
                    IsNullable = <#= column.IsNullable ? "true" : "false" #>,<#
	            if (column.ReferencedTable != null)
	            {#>
                    
                    ReferencedTable = <#= column.ReferencedTable.Name #>.MetaDataSupport<#
                }#>

                },<#
            }#>   
            
            }
        );
    }
}
<#
// ReSharper disable FieldCanBeMadeReadOnly.Local
#>

