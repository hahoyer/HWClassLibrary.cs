<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Data.dll" #>
<#@ Assembly Name="$(TargetDir)System.Data.SQLite.dll" #>
<#@ Assembly Name="$(TargetDir)HWClassLibrary.dll" #>
<#@ import namespace="global::System.Data" #>
<#@ import namespace="global::System.Data.SqlClient" #>
<#@ import namespace="global::System.Data.SQLite" #>
<#@ import namespace="global::HWClassLibrary.sqlass" #>
<#@ import namespace="global::HWClassLibrary.Helper" #>
using System.Linq;
using System.Data.Common;
using HWClassLibrary.Helper;

namespace HWClassLibrary.sqlass.MetaData
{
<# 
var context = new Context { Connection = new SQLiteConnection("Data Source=test.sqlite;Version=3;") };
foreach (var metaTable in context.Schema) 
{#> 
    // <#=metaTable["CollectionName"] #> <#=metaTable["NumberOfRestrictions"] #> <#=metaTable["NumberOfIdentifierParts"] #> <#
            
	var columnCount = metaTable["NumberOfRestrictions"].ToInt32() + metaTable["NumberOfIdentifierParts"].ToInt32();
    if(columnCount > 0)
    {#> 
    public sealed class <#=metaTable["CollectionName"].ToSingular() #> 
    {<#
	    var subTable = context.SubSchema(metaTable["CollectionName"].ToString());
	    for (var i = 0; i < columnCount; i++)
	    {#>
 
        public <#= subTable.Columns[i].DataType.FullName #> <#= subTable.Columns[i].ColumnName #>;<#
	    }#>


        static public <#=metaTable["CollectionName"].ToSingular() #>[] Initialize(DbConnection connection) 
        {
            return connection
                .GetSchema(<#= metaTable["CollectionName"].ToString().Quote() #>)
                .Select()
                .Select
                (
                    row=>new <#= metaTable["CollectionName"].ToSingular() #> 
                    {<#
        for (var i = 0; i < columnCount; i++)
	    {#>
 
                        <#= subTable.Columns[i].ColumnName #> = row[<#= subTable.Columns[i].ColumnName.Quote() #>].To<#= subTable.Columns[i].DataType.Name #>() ,<#
	    }#>
            
                    }
                )
                .ToArray();
        }

        public override string ToString()
        {
            return<#
        for (var i = 0; i < columnCount; i++)
	    {#>
 
            <#=(i==0? "": " + \" \" + ") + subTable.Columns[i].ColumnName #>.ToString()<#
	    }#>;            
        }
    }
<#
	}        
}
#>

    public sealed class MetaData
    {
        readonly DbConnection _connection;
        public MetaData(DbConnection connection) { _connection = connection; }<#

foreach (var metaTable in context.Schema) 
{ 
    if(metaTable["NumberOfRestrictions"].ToInt32() + metaTable["NumberOfIdentifierParts"].ToInt32() > 0)
    {#> 
        public <#=metaTable["CollectionName"].ToSingular() #>[] <#=metaTable["CollectionName"] #> {get{return <#=metaTable["CollectionName"].ToSingular() #>.Initialize(_connection);}}<#
    }
}
#>

    }
}